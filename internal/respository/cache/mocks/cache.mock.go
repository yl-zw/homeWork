// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/respository/cache/rediscahe.go
//
// Generated by this command:
//
//	mockgen.exe -source=./internal/respository/cache/rediscahe.go -package=cachemock -destination=./internal/respository/cache/mocks/cache.mock.go
//
// Package cachemock is a generated GoMock package.
package cachemock

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// DelKey mocks base method.
func (m *MockCache) DelKey(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelKey", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelKey indicates an expected call of DelKey.
func (mr *MockCacheMockRecorder) DelKey(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelKey", reflect.TypeOf((*MockCache)(nil).DelKey), key)
}

// Get mocks base method.
func (m *MockCache) Get(key string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheMockRecorder) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache)(nil).Get), key)
}

// Set mocks base method.
func (m *MockCache) Set(key string, value any, expire ...time.Duration) error {
	m.ctrl.T.Helper()
	varargs := []any{key, value}
	for _, a := range expire {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Set", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCacheMockRecorder) Set(key, value any, expire ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{key, value}, expire...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCache)(nil).Set), varargs...)
}
